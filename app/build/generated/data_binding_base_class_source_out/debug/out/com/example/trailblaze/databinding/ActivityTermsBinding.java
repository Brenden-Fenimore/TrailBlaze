// Generated by view binder compiler. Do not edit!
package com.example.trailblaze.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.trailblaze.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityTermsBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final LinearLayout LinearColumnterms;

  @NonNull
  public final TextView agreement;

  @NonNull
  public final TextView lastupdated;

  @NonNull
  public final TextView msgTermsandco2;

  @NonNull
  public final TextView msgTermsandco3;

  @NonNull
  public final Button termsOKbtn;

  @NonNull
  public final TextView termsandconditions;

  @NonNull
  public final TextView tocContLicense;

  @NonNull
  public final TextView tocContactUs;

  @NonNull
  public final TextView tocCorrections;

  @NonNull
  public final TextView tocDisRes;

  @NonNull
  public final TextView tocDisclaimer;

  @NonNull
  public final TextView tocElectronicCommunitcations;

  @NonNull
  public final TextView tocGovLaw;

  @NonNull
  public final TextView tocIndemnification;

  @NonNull
  public final TextView tocIntellectualProperty;

  @NonNull
  public final TextView tocLiabilityLimitations;

  @NonNull
  public final TextView tocMisc;

  @NonNull
  public final TextView tocModInt;

  @NonNull
  public final TextView tocProhActivities;

  @NonNull
  public final TextView tocSerManagement;

  @NonNull
  public final TextView tocServices;

  @NonNull
  public final TextView tocTermTerm;

  @NonNull
  public final TextView tocUserData;

  @NonNull
  public final TextView tocUserGenCon;

  @NonNull
  public final TextView tocUserRep;

  private ActivityTermsBinding(@NonNull LinearLayout rootView,
      @NonNull LinearLayout LinearColumnterms, @NonNull TextView agreement,
      @NonNull TextView lastupdated, @NonNull TextView msgTermsandco2,
      @NonNull TextView msgTermsandco3, @NonNull Button termsOKbtn,
      @NonNull TextView termsandconditions, @NonNull TextView tocContLicense,
      @NonNull TextView tocContactUs, @NonNull TextView tocCorrections, @NonNull TextView tocDisRes,
      @NonNull TextView tocDisclaimer, @NonNull TextView tocElectronicCommunitcations,
      @NonNull TextView tocGovLaw, @NonNull TextView tocIndemnification,
      @NonNull TextView tocIntellectualProperty, @NonNull TextView tocLiabilityLimitations,
      @NonNull TextView tocMisc, @NonNull TextView tocModInt, @NonNull TextView tocProhActivities,
      @NonNull TextView tocSerManagement, @NonNull TextView tocServices,
      @NonNull TextView tocTermTerm, @NonNull TextView tocUserData, @NonNull TextView tocUserGenCon,
      @NonNull TextView tocUserRep) {
    this.rootView = rootView;
    this.LinearColumnterms = LinearColumnterms;
    this.agreement = agreement;
    this.lastupdated = lastupdated;
    this.msgTermsandco2 = msgTermsandco2;
    this.msgTermsandco3 = msgTermsandco3;
    this.termsOKbtn = termsOKbtn;
    this.termsandconditions = termsandconditions;
    this.tocContLicense = tocContLicense;
    this.tocContactUs = tocContactUs;
    this.tocCorrections = tocCorrections;
    this.tocDisRes = tocDisRes;
    this.tocDisclaimer = tocDisclaimer;
    this.tocElectronicCommunitcations = tocElectronicCommunitcations;
    this.tocGovLaw = tocGovLaw;
    this.tocIndemnification = tocIndemnification;
    this.tocIntellectualProperty = tocIntellectualProperty;
    this.tocLiabilityLimitations = tocLiabilityLimitations;
    this.tocMisc = tocMisc;
    this.tocModInt = tocModInt;
    this.tocProhActivities = tocProhActivities;
    this.tocSerManagement = tocSerManagement;
    this.tocServices = tocServices;
    this.tocTermTerm = tocTermTerm;
    this.tocUserData = tocUserData;
    this.tocUserGenCon = tocUserGenCon;
    this.tocUserRep = tocUserRep;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityTermsBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityTermsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_terms, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityTermsBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.LinearColumnterms;
      LinearLayout LinearColumnterms = ViewBindings.findChildViewById(rootView, id);
      if (LinearColumnterms == null) {
        break missingId;
      }

      id = R.id.agreement;
      TextView agreement = ViewBindings.findChildViewById(rootView, id);
      if (agreement == null) {
        break missingId;
      }

      id = R.id.lastupdated;
      TextView lastupdated = ViewBindings.findChildViewById(rootView, id);
      if (lastupdated == null) {
        break missingId;
      }

      id = R.id.msg_termsandco2;
      TextView msgTermsandco2 = ViewBindings.findChildViewById(rootView, id);
      if (msgTermsandco2 == null) {
        break missingId;
      }

      id = R.id.msg_termsandco3;
      TextView msgTermsandco3 = ViewBindings.findChildViewById(rootView, id);
      if (msgTermsandco3 == null) {
        break missingId;
      }

      id = R.id.termsOKbtn;
      Button termsOKbtn = ViewBindings.findChildViewById(rootView, id);
      if (termsOKbtn == null) {
        break missingId;
      }

      id = R.id.termsandconditions;
      TextView termsandconditions = ViewBindings.findChildViewById(rootView, id);
      if (termsandconditions == null) {
        break missingId;
      }

      id = R.id.toc_contLicense;
      TextView tocContLicense = ViewBindings.findChildViewById(rootView, id);
      if (tocContLicense == null) {
        break missingId;
      }

      id = R.id.toc_contactUs;
      TextView tocContactUs = ViewBindings.findChildViewById(rootView, id);
      if (tocContactUs == null) {
        break missingId;
      }

      id = R.id.toc_corrections;
      TextView tocCorrections = ViewBindings.findChildViewById(rootView, id);
      if (tocCorrections == null) {
        break missingId;
      }

      id = R.id.toc_dis_res;
      TextView tocDisRes = ViewBindings.findChildViewById(rootView, id);
      if (tocDisRes == null) {
        break missingId;
      }

      id = R.id.toc_disclaimer;
      TextView tocDisclaimer = ViewBindings.findChildViewById(rootView, id);
      if (tocDisclaimer == null) {
        break missingId;
      }

      id = R.id.toc_electronic_communitcations;
      TextView tocElectronicCommunitcations = ViewBindings.findChildViewById(rootView, id);
      if (tocElectronicCommunitcations == null) {
        break missingId;
      }

      id = R.id.toc_govLaw;
      TextView tocGovLaw = ViewBindings.findChildViewById(rootView, id);
      if (tocGovLaw == null) {
        break missingId;
      }

      id = R.id.toc_indemnification;
      TextView tocIndemnification = ViewBindings.findChildViewById(rootView, id);
      if (tocIndemnification == null) {
        break missingId;
      }

      id = R.id.toc_intellectualProperty;
      TextView tocIntellectualProperty = ViewBindings.findChildViewById(rootView, id);
      if (tocIntellectualProperty == null) {
        break missingId;
      }

      id = R.id.toc_liability_limitations;
      TextView tocLiabilityLimitations = ViewBindings.findChildViewById(rootView, id);
      if (tocLiabilityLimitations == null) {
        break missingId;
      }

      id = R.id.toc_misc;
      TextView tocMisc = ViewBindings.findChildViewById(rootView, id);
      if (tocMisc == null) {
        break missingId;
      }

      id = R.id.toc_mod_int;
      TextView tocModInt = ViewBindings.findChildViewById(rootView, id);
      if (tocModInt == null) {
        break missingId;
      }

      id = R.id.toc_prohActivities;
      TextView tocProhActivities = ViewBindings.findChildViewById(rootView, id);
      if (tocProhActivities == null) {
        break missingId;
      }

      id = R.id.toc_serManagement;
      TextView tocSerManagement = ViewBindings.findChildViewById(rootView, id);
      if (tocSerManagement == null) {
        break missingId;
      }

      id = R.id.toc_services;
      TextView tocServices = ViewBindings.findChildViewById(rootView, id);
      if (tocServices == null) {
        break missingId;
      }

      id = R.id.toc_term_term;
      TextView tocTermTerm = ViewBindings.findChildViewById(rootView, id);
      if (tocTermTerm == null) {
        break missingId;
      }

      id = R.id.toc_userData;
      TextView tocUserData = ViewBindings.findChildViewById(rootView, id);
      if (tocUserData == null) {
        break missingId;
      }

      id = R.id.toc_userGenCon;
      TextView tocUserGenCon = ViewBindings.findChildViewById(rootView, id);
      if (tocUserGenCon == null) {
        break missingId;
      }

      id = R.id.toc_userRep;
      TextView tocUserRep = ViewBindings.findChildViewById(rootView, id);
      if (tocUserRep == null) {
        break missingId;
      }

      return new ActivityTermsBinding((LinearLayout) rootView, LinearColumnterms, agreement,
          lastupdated, msgTermsandco2, msgTermsandco3, termsOKbtn, termsandconditions,
          tocContLicense, tocContactUs, tocCorrections, tocDisRes, tocDisclaimer,
          tocElectronicCommunitcations, tocGovLaw, tocIndemnification, tocIntellectualProperty,
          tocLiabilityLimitations, tocMisc, tocModInt, tocProhActivities, tocSerManagement,
          tocServices, tocTermTerm, tocUserData, tocUserGenCon, tocUserRep);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
