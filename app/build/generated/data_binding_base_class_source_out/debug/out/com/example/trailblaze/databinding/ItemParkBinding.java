// Generated by view binder compiler. Do not edit!
package com.example.trailblaze.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.trailblaze.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ItemParkBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final TextView parkDescription;

  @NonNull
  public final TextView parkLatitude;

  @NonNull
  public final TextView parkLongitude;

  @NonNull
  public final TextView parkName;

  @NonNull
  public final TextView parkTerrain;

  @NonNull
  public final TextView trailLength;

  private ItemParkBinding(@NonNull LinearLayout rootView, @NonNull TextView parkDescription,
      @NonNull TextView parkLatitude, @NonNull TextView parkLongitude, @NonNull TextView parkName,
      @NonNull TextView parkTerrain, @NonNull TextView trailLength) {
    this.rootView = rootView;
    this.parkDescription = parkDescription;
    this.parkLatitude = parkLatitude;
    this.parkLongitude = parkLongitude;
    this.parkName = parkName;
    this.parkTerrain = parkTerrain;
    this.trailLength = trailLength;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemParkBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ItemParkBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.item_park, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ItemParkBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.parkDescription;
      TextView parkDescription = ViewBindings.findChildViewById(rootView, id);
      if (parkDescription == null) {
        break missingId;
      }

      id = R.id.parkLatitude;
      TextView parkLatitude = ViewBindings.findChildViewById(rootView, id);
      if (parkLatitude == null) {
        break missingId;
      }

      id = R.id.parkLongitude;
      TextView parkLongitude = ViewBindings.findChildViewById(rootView, id);
      if (parkLongitude == null) {
        break missingId;
      }

      id = R.id.parkName;
      TextView parkName = ViewBindings.findChildViewById(rootView, id);
      if (parkName == null) {
        break missingId;
      }

      id = R.id.parkTerrain;
      TextView parkTerrain = ViewBindings.findChildViewById(rootView, id);
      if (parkTerrain == null) {
        break missingId;
      }

      id = R.id.trailLength;
      TextView trailLength = ViewBindings.findChildViewById(rootView, id);
      if (trailLength == null) {
        break missingId;
      }

      return new ItemParkBinding((LinearLayout) rootView, parkDescription, parkLatitude,
          parkLongitude, parkName, parkTerrain, trailLength);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
