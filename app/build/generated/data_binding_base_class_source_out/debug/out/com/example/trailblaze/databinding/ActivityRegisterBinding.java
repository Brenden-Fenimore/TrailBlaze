// Generated by view binder compiler. Do not edit!
package com.example.trailblaze.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.FrameLayout;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.AppCompatCheckBox;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.trailblaze.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityRegisterBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final LinearLayout LinearColumnlreg;

  @NonNull
  public final TextView Register;

  @NonNull
  public final ImageView calendar;

  @NonNull
  public final AppCompatCheckBox checkBoxTerms;

  @NonNull
  public final Button createAccountBtn;

  @NonNull
  public final ImageView email;

  @NonNull
  public final EditText etConfirmpw;

  @NonNull
  public final EditText etDateofbirth;

  @NonNull
  public final EditText etEmail;

  @NonNull
  public final EditText etUsername;

  @NonNull
  public final EditText etpw1;

  @NonNull
  public final FrameLayout frameStackorConnectw;

  @NonNull
  public final ImageView imageView3;

  @NonNull
  public final ImageView imageView8;

  @NonNull
  public final LinearLayout linearColumnEmail;

  @NonNull
  public final LinearLayout linearColumnconfirmpw;

  @NonNull
  public final LinearLayout linearColumndob;

  @NonNull
  public final LinearLayout linearColumnpw;

  @NonNull
  public final LinearLayout linearColumnregister;

  @NonNull
  public final LinearLayout linearColumnusername;

  @NonNull
  public final LinearLayout linearRowRememberpass;

  @NonNull
  public final ImageView pw;

  @NonNull
  public final ImageView pw2;

  @NonNull
  public final TextView termsandconditions;

  @NonNull
  public final TextView txtLogin;

  @NonNull
  public final TextView txtRegister;

  private ActivityRegisterBinding(@NonNull LinearLayout rootView,
      @NonNull LinearLayout LinearColumnlreg, @NonNull TextView Register,
      @NonNull ImageView calendar, @NonNull AppCompatCheckBox checkBoxTerms,
      @NonNull Button createAccountBtn, @NonNull ImageView email, @NonNull EditText etConfirmpw,
      @NonNull EditText etDateofbirth, @NonNull EditText etEmail, @NonNull EditText etUsername,
      @NonNull EditText etpw1, @NonNull FrameLayout frameStackorConnectw,
      @NonNull ImageView imageView3, @NonNull ImageView imageView8,
      @NonNull LinearLayout linearColumnEmail, @NonNull LinearLayout linearColumnconfirmpw,
      @NonNull LinearLayout linearColumndob, @NonNull LinearLayout linearColumnpw,
      @NonNull LinearLayout linearColumnregister, @NonNull LinearLayout linearColumnusername,
      @NonNull LinearLayout linearRowRememberpass, @NonNull ImageView pw, @NonNull ImageView pw2,
      @NonNull TextView termsandconditions, @NonNull TextView txtLogin,
      @NonNull TextView txtRegister) {
    this.rootView = rootView;
    this.LinearColumnlreg = LinearColumnlreg;
    this.Register = Register;
    this.calendar = calendar;
    this.checkBoxTerms = checkBoxTerms;
    this.createAccountBtn = createAccountBtn;
    this.email = email;
    this.etConfirmpw = etConfirmpw;
    this.etDateofbirth = etDateofbirth;
    this.etEmail = etEmail;
    this.etUsername = etUsername;
    this.etpw1 = etpw1;
    this.frameStackorConnectw = frameStackorConnectw;
    this.imageView3 = imageView3;
    this.imageView8 = imageView8;
    this.linearColumnEmail = linearColumnEmail;
    this.linearColumnconfirmpw = linearColumnconfirmpw;
    this.linearColumndob = linearColumndob;
    this.linearColumnpw = linearColumnpw;
    this.linearColumnregister = linearColumnregister;
    this.linearColumnusername = linearColumnusername;
    this.linearRowRememberpass = linearRowRememberpass;
    this.pw = pw;
    this.pw2 = pw2;
    this.termsandconditions = termsandconditions;
    this.txtLogin = txtLogin;
    this.txtRegister = txtRegister;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityRegisterBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityRegisterBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_register, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityRegisterBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.LinearColumnlreg;
      LinearLayout LinearColumnlreg = ViewBindings.findChildViewById(rootView, id);
      if (LinearColumnlreg == null) {
        break missingId;
      }

      id = R.id.Register;
      TextView Register = ViewBindings.findChildViewById(rootView, id);
      if (Register == null) {
        break missingId;
      }

      id = R.id.calendar;
      ImageView calendar = ViewBindings.findChildViewById(rootView, id);
      if (calendar == null) {
        break missingId;
      }

      id = R.id.checkBoxTerms;
      AppCompatCheckBox checkBoxTerms = ViewBindings.findChildViewById(rootView, id);
      if (checkBoxTerms == null) {
        break missingId;
      }

      id = R.id.createAccountBtn;
      Button createAccountBtn = ViewBindings.findChildViewById(rootView, id);
      if (createAccountBtn == null) {
        break missingId;
      }

      id = R.id.email;
      ImageView email = ViewBindings.findChildViewById(rootView, id);
      if (email == null) {
        break missingId;
      }

      id = R.id.etConfirmpw;
      EditText etConfirmpw = ViewBindings.findChildViewById(rootView, id);
      if (etConfirmpw == null) {
        break missingId;
      }

      id = R.id.etDateofbirth;
      EditText etDateofbirth = ViewBindings.findChildViewById(rootView, id);
      if (etDateofbirth == null) {
        break missingId;
      }

      id = R.id.etEmail;
      EditText etEmail = ViewBindings.findChildViewById(rootView, id);
      if (etEmail == null) {
        break missingId;
      }

      id = R.id.etUsername;
      EditText etUsername = ViewBindings.findChildViewById(rootView, id);
      if (etUsername == null) {
        break missingId;
      }

      id = R.id.etpw1;
      EditText etpw1 = ViewBindings.findChildViewById(rootView, id);
      if (etpw1 == null) {
        break missingId;
      }

      id = R.id.frameStackorConnectw;
      FrameLayout frameStackorConnectw = ViewBindings.findChildViewById(rootView, id);
      if (frameStackorConnectw == null) {
        break missingId;
      }

      id = R.id.imageView3;
      ImageView imageView3 = ViewBindings.findChildViewById(rootView, id);
      if (imageView3 == null) {
        break missingId;
      }

      id = R.id.imageView8;
      ImageView imageView8 = ViewBindings.findChildViewById(rootView, id);
      if (imageView8 == null) {
        break missingId;
      }

      id = R.id.linearColumnEmail;
      LinearLayout linearColumnEmail = ViewBindings.findChildViewById(rootView, id);
      if (linearColumnEmail == null) {
        break missingId;
      }

      id = R.id.linearColumnconfirmpw;
      LinearLayout linearColumnconfirmpw = ViewBindings.findChildViewById(rootView, id);
      if (linearColumnconfirmpw == null) {
        break missingId;
      }

      id = R.id.linearColumndob;
      LinearLayout linearColumndob = ViewBindings.findChildViewById(rootView, id);
      if (linearColumndob == null) {
        break missingId;
      }

      id = R.id.linearColumnpw;
      LinearLayout linearColumnpw = ViewBindings.findChildViewById(rootView, id);
      if (linearColumnpw == null) {
        break missingId;
      }

      id = R.id.linearColumnregister;
      LinearLayout linearColumnregister = ViewBindings.findChildViewById(rootView, id);
      if (linearColumnregister == null) {
        break missingId;
      }

      id = R.id.linearColumnusername;
      LinearLayout linearColumnusername = ViewBindings.findChildViewById(rootView, id);
      if (linearColumnusername == null) {
        break missingId;
      }

      id = R.id.linearRowRememberpass;
      LinearLayout linearRowRememberpass = ViewBindings.findChildViewById(rootView, id);
      if (linearRowRememberpass == null) {
        break missingId;
      }

      id = R.id.pw;
      ImageView pw = ViewBindings.findChildViewById(rootView, id);
      if (pw == null) {
        break missingId;
      }

      id = R.id.pw2;
      ImageView pw2 = ViewBindings.findChildViewById(rootView, id);
      if (pw2 == null) {
        break missingId;
      }

      id = R.id.termsandconditions;
      TextView termsandconditions = ViewBindings.findChildViewById(rootView, id);
      if (termsandconditions == null) {
        break missingId;
      }

      id = R.id.txtLogin;
      TextView txtLogin = ViewBindings.findChildViewById(rootView, id);
      if (txtLogin == null) {
        break missingId;
      }

      id = R.id.txtRegister;
      TextView txtRegister = ViewBindings.findChildViewById(rootView, id);
      if (txtRegister == null) {
        break missingId;
      }

      return new ActivityRegisterBinding((LinearLayout) rootView, LinearColumnlreg, Register,
          calendar, checkBoxTerms, createAccountBtn, email, etConfirmpw, etDateofbirth, etEmail,
          etUsername, etpw1, frameStackorConnectw, imageView3, imageView8, linearColumnEmail,
          linearColumnconfirmpw, linearColumndob, linearColumnpw, linearColumnregister,
          linearColumnusername, linearRowRememberpass, pw, pw2, termsandconditions, txtLogin,
          txtRegister);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
